#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
#=================================================

name: Build x86-64bit OpenWrt

on:
  release:
    types: published
  push:
    branches:
      - master
    paths:
      - '.config'
  schedule:
    - cron: 15 17 * * *
  watch:
    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: x86.config
  DIY_SH: x86_diy.sh
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf python3
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        curl -fsSL https://raw.githubusercontent.com/P3TERX/dotfiles/master/.bashrc >> ~/.bashrc

    - name: Clone source code # 克隆的源代码
      id: openwrt
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "::set-env name=useVersionInfo::$useVersionInfo"
        echo "::set-env name=DATE::$(date "+%Y-%m-%d")"

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a
        
    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_SH
        cd openwrt
        ../$DIY_SH

    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@master
      if: env.SSH_ACTIONS == 'true'

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc) + 1)) thread compile"
        make -j$(($(nproc) + 1)) || make -j1 V=s
        echo "::set-output name=status::success"

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages        
        echo "::set-env name=FIRMWARE::$PWD"
        echo "::set-output name=status::success"
        release_tag="x86-64bit-Lean-${{ env.DATE }}-slim"
        echo "##[set-output name=Release_tag;]$release_tag"

    - name: Upload artifact
      uses: actions/upload-artifact@master
      with:
        name: OpenWrt_x64_firmware
        path: ${{ env.FIRMWARE }}
        
    - name: Create release
      id: create_release
      uses: ncipollo/release-action@v1.6.1
      with:
        name: Openwrt x64 定制版 ${{ env.DATE }} | 自动编译
        allowUpdates: true
        tag: ${{ env.DATE }}
        commit: master
        replacesArtifacts: true
        token: ${{ secrets.RELEASES_TOKEN }}
        body: |
          ${{ steps.organize.outputs.release_tag }}
          ${{ env.useVersionInfo }}
        artifact: ${{ env.FIRMWARE }}/*combined-squashfs.img.gz
    
#    - name: Create Release
#      id: create_release
#      uses: actions/create-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.RELEASES_TOKEN }}
#      with:
#        tag_name: ${{ github.ref }}
#        release_name: ${{ env.DATE }}
#        body: |
#          Openwrt x64精简版，仅支持vmware esxi环境
#          源码信息:
#          ${{ env.useVersionInfo }}
#        draft: false
#        prerelease: false

#    - name: Upload Release Asset
#      uses: svenstaro/upload-release-action@v1-release
#      with:
#        repo_token: ${{ secrets.RELEASES_TOKEN }}
#        file: ${{ env.FIRMWARE }}/* # https://www.npmjs.com/package/glob
#        tag: ${{ github.ref }}
#        overwrite: true
#        file_glob: true

